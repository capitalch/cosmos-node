{"version":3,"sources":["react-form/custom/set-validators.tsx","react-form/generic/store.tsx","react-form/generic/global-form.tsx","react-form/generic/error-display.tsx","react-form/generic/set.tsx","react-form/generic/array.tsx","react-form/custom/form-validators.tsx","react-form/ReactForm.tsx","react-form/utils/builtin-validators.tsx","react-form/custom/item-validators.tsx","react-form/utils/Ibuki.tsx","react-form/custom/custom-methods.tsx","react-form/generic/generic-handler.tsx","react-form/component-store/html-component-store.tsx","react-form/generic/generic-submit.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["setLevelValidators","confirmPwdLength","a","dataObject","putErrors","ret","message","length","undefined","name","pwdConfirmPwd","sampleValidation","includes","sampleAsyncValidation1","Promise","resolve","setTimeout","store","useGlobalForm","id","init","ee","resetForm","getEE","EventEmitter","formData","validators","controlLevelErrors","formErrors","boxOfSets","_doValidate","Object","asyncToGenerator","regenerator_default","mark","_callee","v","wrap","_context","prev","next","t0","keys","t1","done","value","t2","t3","console","log","stop","apply","this","arguments","clearServerError","emit","registerServerError","getSets","controlId","initBoxOfSets","getFormObject","getFormData","setFormRefresh","formId","f","doFormRefresh","submitForm","setValidators","validateAll","resetValidators","reset","obj","arr","filter","x","startsWith","forEach","y","setControlErrors","isAnyError","isValidForm","values","some","doValidate","_x","setField","parent","fieldName","fieldValue","initField","ErrorDisplay","props","errors","_useState","forwardObj","useState","setRefresh","slicedToArray","useEffect","listners","listner1","on","mess","listner2","pop","push","removeAllListeners","react_default","createElement","className","out","err","index","key","fn","set","item","idx","parentId","isArrayElement","componentStore","removeItem","_useGlobalForm","idx1","concat","_useState2","setErrors","items","validations","objectSpread","_validateAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","Array","isArray","Symbol","iterator","call","return","finish","Fragment","onClick","e","preventDefault","label","map","it","Tag","type","error_display_ErrorDisplay","array","doRefresh","sets","add","patternObj","JSON","parse","stringify","pattern","minus","splice","style","textAlign","holder","String","formLevelValidators","ReactForm","formJson","_useState3","_useState4","class","title","builtinValidators","required","minLength","replace","args","toString","len","shouldNotContainChar","itemValidators","shouldHaveOneSpecialChar","test","callbacks","sampleAsyncValidation2","ibuki","subject","Subject","behSubject","BehaviorSubject","options","data","pipe","d","subscribe","url","fetch","res","json","axios","get","post","method","mode","cache","headers","Content-Type","body","_context4","then","catch","error","customMethods","test1","industries","numericZeroToTen","electronicProduct","contacts","_contacts","json1","httpPost","sent","unshift","abrupt","submitForm1","_submitForm","_callee2","_context2","config","postUrl","_x2","useGeneric","_useState5","_useState6","selectOptions","setSelectOptions","allItemValidators","onChangeValidations","onBlurValidations","_onChangeEvent","_callee3","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context3","_onBlurEvent","_callee4","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_doInitForSelect","_callee5","itemOptions","tempOptions","labelName","valueName","_context5","methodName","httpmethod","httpMethod","httpGet","addDefault","toConsumableArray","xName","xValue","xPlaceholder","placeholder","XLabel","XErrorDisplay","onChangeEvent","_x3","onBlurEvent","_x4","xClassName","xStyle","doInitForSelect","text","_useGeneric","onChange","target","onBlur","textarea","_useGeneric2","radio","_useGeneric3","option","checked","checkbox","_useGeneric4","select","_useGeneric5","datepicker","_useGeneric6","button","dataHolder","setx","submit","submitOnClick","isBusy","_submitOnClick","useSubmit","App","setFormJson","setFormId","jsonValue","setJsonValue","_useState7","_useState8","isDisabled","setIsDisabled","formObjects","1","employeeInfo","2","gymRegistration","3","studentAdmission","4","clubMembership","5","loanApplication","6","electronicsRental","7","companyProfile","8","employeePerformance","9","softwareEvaluation","10","eventFeedback","11","sample1","isProceed","disabled","hidden","react_form_ReactForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2c2ebb5.chunk.js","sourcesContent":["import React, { Component, useState } from 'react';\r\n\r\nconst setLevelValidators: any = {\r\n    confirmPwdLength: (a: any, dataObject: any, putErrors: any) => {\r\n        let ret = a.message || 'Confirm Pwd length > 3';\r\n        if (dataObject['confirmPwd'] && dataObject['confirmPwd'].length > 3) {\r\n            ret = undefined;\r\n        }\r\n        putErrors(a.name, ret);\r\n    },\r\n    pwdConfirmPwd: (a: any, dataObject: any, putErrors: any) => {\r\n        let ret = a.message || 'Pwd should be same as confirm Pwd';\r\n        if (dataObject['pwd'] === dataObject['confirmPwd']) {\r\n            ret = undefined;\r\n        }\r\n        putErrors(a.name, ret);\r\n    },\r\n    sampleValidation: (a: any, dataObject: any, putErrors: any) => {\r\n        let ret = a.message || 'This is a sample set level validation';\r\n        if (dataObject['empName'] && dataObject['empName'].includes('x')) {\r\n            ret = undefined;\r\n        }\r\n        ret = undefined;\r\n        putErrors(a.name, ret);\r\n    },\r\n    sampleAsyncValidation1: (a: any, dataObject: any, putErrors: any) => {\r\n        const promise = new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                putErrors(a.name, a.message);\r\n                resolve('success');\r\n            }, 5000)\r\n        })\r\n        return promise;\r\n    }\r\n}\r\n\r\nexport { setLevelValidators };","const store:any = {};\r\nexport {store};","import { store } from './store';\r\nimport EventEmitter from 'events';\r\n\r\nfunction useGlobalForm(id: string) {\r\n    init();\r\n\r\n    function init() {\r\n        if (!store[id]) {\r\n            store[id] = {};\r\n            store.ee = undefined;\r\n            resetForm(id);\r\n            // store[id].formData = {};\r\n            // store[id].validators = {};\r\n            // store[id].controlLevelErrors = {};\r\n            // store[id].formErrors = {};\r\n            // store[id].boxOfSets = {};\r\n        }\r\n    }\r\n\r\n    function getEE(id: string) {\r\n        if (!store[id].ee) {\r\n            store[id].ee = new EventEmitter();\r\n        }\r\n        return store[id].ee;\r\n    }\r\n\r\n    function resetForm(id: string) {\r\n        store[id].formData = {};\r\n        store[id].validators = {};\r\n        store[id].controlLevelErrors = {};\r\n        store[id].formErrors = {};\r\n        store[id].boxOfSets = {};\r\n    }\r\n\r\n    function setFormRefresh(formId: string, f: any) {\r\n        store[formId].doFormRefresh = f;\r\n    }\r\n\r\n    function doFormRefresh(id: string) {\r\n        init();\r\n        // resetForm(id);\r\n        store[id].doFormRefresh();\r\n    }\r\n\r\n    function getFormData(id: string) {\r\n        return store[id].formData;\r\n    }\r\n\r\n    function getFormObject(id: string) {\r\n        return store[id];\r\n    }\r\n\r\n    function submitForm(id: string) {\r\n\r\n    }\r\n\r\n    function registerServerError(id: string, message: string) {\r\n        getEE(id).emit('REGISTER-SERVER-ERROR', message);\r\n    }\r\n\r\n    function clearServerError(id:string){\r\n        getEE(id).emit('CLEAR-SERVER-ERROR')\r\n    }\r\n\r\n    function setValidators(id: string, controlId: string, validateAll: Function) {\r\n        store[id].validators[controlId] = validateAll;\r\n    }\r\n\r\n    async function doValidate(id: string) {\r\n        const validators = store[id].validators;\r\n        try {\r\n            for (let v in validators) {\r\n                validators[v] && (await validators[v]());\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n\r\n    }\r\n\r\n    function setControlErrors(id: string, controlId: string, isAnyError: any) {\r\n        store[id].controlLevelErrors[controlId] = isAnyError\r\n    }\r\n\r\n    function resetValidators(id: string, controlId: string) {\r\n        //Delete those keys which start with controlId \r\n        function reset(obj: any) {\r\n            const arr: string[] = Object.keys(obj);\r\n            const toBeDeleted: string[] = (arr.length > 0) ? arr.filter((x: string) => x.startsWith(controlId)) : [];\r\n            toBeDeleted.forEach(y => { delete obj[y]; });\r\n        }\r\n        reset(store[id].validators);\r\n        reset(store[id].controlLevelErrors);\r\n    }\r\n\r\n    function isValidForm(id: string) {\r\n        const isAnyError = Object.values(store[id].controlLevelErrors).some((x: any) => x != undefined);\r\n        return !isAnyError;\r\n    }\r\n\r\n    function setField(parent: any, fieldName: string, fieldValue: any) {\r\n        parent[fieldName] = fieldValue;\r\n    }\r\n\r\n    function initField(parent: any, fieldName: string, fieldValue: any) {\r\n        if (!(fieldName in parent)) {\r\n            parent[fieldName] = fieldValue;\r\n        }\r\n    }\r\n\r\n    function initBoxOfSets(id: string, controlId: string) {\r\n        store[id].boxOfSets[controlId] || (store[id].boxOfSets[controlId] = []);\r\n    }\r\n\r\n    function getSets(id: string, controlId: string) {\r\n        return store[id].boxOfSets[controlId];\r\n    }\r\n\r\n    return {\r\n        clearServerError, registerServerError, getEE, getSets, initBoxOfSets, getFormObject, getFormData, setFormRefresh, doFormRefresh, resetForm, submitForm, setValidators, resetValidators, setControlErrors, isValidForm, doValidate, setField, initField\r\n    }\r\n}\r\nexport { useGlobalForm };","import React, { useEffect, useState } from 'react';\r\nimport { useGlobalForm } from \"./global-form\";\r\n\r\nconst ErrorDisplay = (props: any) => {\r\n    const { formId, errors, forwardObj } = props;\r\n    const [, setRefresh] = useState({});\r\n    const { getEE }: any = useGlobalForm(formId);\r\n    const fn = () => {\r\n        let out: any[] = [];\r\n        errors.forEach((err: string, index: number) => {\r\n            err && out.push(<li key={index}>{err}</li>);\r\n        })\r\n        return out;\r\n    };\r\n\r\n    useEffect(() => {\r\n        const listners: any[] = [];\r\n        if (formId) {\r\n            const listner1 = getEE(formId).on('REGISTER-SERVER-ERROR', (mess: string) => {\r\n                errors[0] = mess;\r\n                setRefresh({});\r\n            });\r\n            const listner2 = getEE(formId).on('CLEAR-SERVER-ERROR', () => {\r\n                errors.pop();\r\n                setRefresh({});\r\n            });\r\n            listners.push(listner1);\r\n            listners.push(listner2);\r\n        }\r\n        return (() => {\r\n            if (listners && (listners.length > 0)) {\r\n                getEE(formId).removeAllListeners();\r\n            }\r\n        })\r\n    });\r\n\r\n    function test() {\r\n        console.log('test');\r\n    }\r\n\r\n    // forwardObj.f = () => console.log('forward');\r\n\r\n    const comp =\r\n        <div className=\"x-error\" >\r\n            <small>\r\n                {\r\n                    <ul>\r\n                        {fn()}\r\n                    </ul>\r\n                }\r\n            </small>\r\n        </div>\r\n    return comp;\r\n}\r\nexport { ErrorDisplay };\r\n\r\n/*\r\nstyle={{ paddingTop: 3 }}\r\n// (errors && errors.length > 0) ?\r\n// : <ul></ul>\r\n*/","import React, { useState, useEffect } from 'react';\r\nimport { setLevelValidators } from '../custom/set-validators';\r\nimport { ErrorDisplay } from './error-display';\r\nimport { useGlobalForm } from \"./global-form\";\r\n\r\nconst set =\r\n    (props: any) => {\r\n        const { parent, item, idx, parentId, formId, isArrayElement, componentStore, index, removeItem } = props;\r\n        const {initField, setField, setValidators, setControlErrors } = useGlobalForm(formId);\r\n        const idx1 = idx || '';// to convert undefined to ''. Otherwise undefined word is appended to item.name while calling setValidators()\r\n        const controlId = parentId.concat('.', item.name, idx1);\r\n        \r\n        const [errors, setErrors]: any = useState({});\r\n        let dataObject: any = {};\r\n        const items: any[] = item.items;\r\n        const validations = item.validations;\r\n\r\n        if (isArrayElement) {\r\n            dataObject = parent;\r\n        } else {\r\n            initField(parent, item.name, {});\r\n            dataObject = parent[item.name];\r\n        }\r\n\r\n        useEffect(() => {\r\n            setValidators(formId, controlId, validateAll);\r\n        })\r\n\r\n        function putErrors(key: string, value: string) {\r\n            errors[key] = value || undefined; //undefined value will not be displayed by ErrorDisplay        \r\n            const isAnyError = Object.values(errors).some(v => v != undefined);\r\n            setControlErrors(formId, controlId, (isAnyError || undefined));\r\n            setErrors({ ...errors });\r\n        }\r\n\r\n        async function validateAll() {\r\n            if (validations && Array.isArray(validations) && (validations.length > 0)) {\r\n                for (let a of validations) {\r\n                    await setLevelValidators[a.name].call(null, a, dataObject, putErrors);\r\n                }\r\n            }\r\n        }\r\n\r\n        function getMinusButton() {\r\n            const button = <button className=\"x-remove\" onClick={(e) => {\r\n                e.preventDefault();\r\n                removeItem && removeItem(index)\r\n            }}>X</button>\r\n            return button;\r\n        }\r\n\r\n        return <>\r\n            <fieldset className=\"x-set\">\r\n                <legend>\r\n                    {props.isArrayElement ? getMinusButton() : null}\r\n                    &nbsp;&nbsp;&nbsp;\r\n                {item.label && item.label.concat(' ', (index === 0) || index ? (index + 1) : '')}\r\n                </legend>\r\n                {\r\n                    items.map((it: any, index: number) => {\r\n                        const Tag = componentStore[it.type];\r\n                        return <div key={index}>\r\n                            <Tag item={it}\r\n                                formId={formId}\r\n                                parent={dataObject}\r\n                                componentStore={componentStore}\r\n                                idx={idx}\r\n                                parentId={controlId}></Tag>\r\n                        </div>\r\n                    })\r\n                }\r\n            </fieldset>\r\n            <ErrorDisplay errors={Object.values(errors)}></ErrorDisplay>\r\n        </>\r\n    }\r\n\r\nexport { set };","import React, { useState, useEffect, useReducer } from 'react';\r\nimport { useGlobalForm } from \"./global-form\";\r\n\r\nconst array =\r\n    (props: any) => {\r\n        const { formId, item, parent, componentStore, parentId } = props;\r\n        const { getSets, initBoxOfSets, initField, resetValidators } = useGlobalForm(formId);\r\n        const controlId = parentId.concat('.', item.name); //unique controlId. It will always be same for same control\r\n        const [, doRefresh] = useState({});\r\n        // const [sets, setSets]: any = useState([]);\r\n        \r\n        // const initialState:any = [];\r\n        // function reducer(state:any,action:string){\r\n        //     return [...state];\r\n        // }\r\n\r\n        // const [sets, dispatch] = useReducer(reducer,initialState);\r\n        initBoxOfSets(formId, controlId);\r\n        const sets = getSets(formId, controlId);\r\n\r\n        function add() {\r\n            const patternObj = JSON.parse(JSON.stringify(item.pattern));\r\n            parent[item.name].push({});\r\n            sets.push(patternObj);\r\n            // setSets(sets);\r\n            doRefresh({});\r\n            // setSets([...sets]);\r\n            // dispatch('');\r\n        }\r\n\r\n        function minus(index: number) {\r\n            if (sets.length > 1) {\r\n                \r\n                parent[item.name].splice(index, 1);\r\n                resetValidators(formId, controlId);                                \r\n                sets.splice(index, 1);\r\n                // setSets((sets));\r\n                doRefresh({});\r\n                // setSets([...sets]);\r\n                // dispatch('');\r\n            }\r\n        }\r\n\r\n        useEffect(() => {\r\n            initField(parent, item.name, []);\r\n            if (sets.length === 0) {\r\n                add();\r\n            }\r\n        });\r\n\r\n\r\n        return <fieldset>\r\n            <legend style={{ textAlign: 'right' }}>{item.label}&nbsp;&nbsp;&nbsp;<button onClick={\r\n                e => {\r\n                    e.preventDefault();\r\n                    add();\r\n                }}>+</button>\r\n            </legend>\r\n            {\r\n                sets && (sets.length > 0) && sets.map((set: any, index: number) => {\r\n                    const holder = parent[item.name][index];\r\n                    set.isArrayElement = true;\r\n                    const Tag = componentStore[set.type];\r\n\r\n                    return <div key={index}>\r\n                        <Tag\r\n                            item={set}\r\n                            formId={formId}\r\n                            parent={holder}\r\n                            isArrayElement={true}\r\n                            componentStore={componentStore}\r\n                            parentId={controlId}\r\n                            index={index} idx={String(index)} removeItem={minus}>\r\n                        </Tag>\r\n                    </div>\r\n                })\r\n            }\r\n        </fieldset>\r\n\r\n    }\r\nexport { array };\r\n/*\r\nconst arrayUtils = {\r\n        addSet: (setName: string, set: any) => {\r\n            const arr = boxOfSets[setName];\r\n            arr.push(set);\r\n            setBoxOfSets({ [setName]: arr });\r\n        },\r\n        removeSet: (setName: string, index: number) => {\r\n            const arr = boxOfSets[setName];\r\n            arr.splice(index, 1);\r\n            setBoxOfSets({ [setName]: arr });\r\n        },\r\n        getSets: (setName: string) => boxOfSets[setName],\r\n        addInArray: (container: any[]) => container.push({}),\r\n        removeFromArray: (container: any[], index: number) => container.splice(index, 1),\r\n        getPatternObj: () => JSON.parse(JSON.stringify(item.pattern)),\r\n        add: () => {\r\n            arrayUtils.addSet(item.name, arrayUtils.getPatternObj());\r\n            arrayUtils.addInArray(dataHolder[item.name]);\r\n        },\r\n        minus: (index: number) => {\r\n            arrayUtils.removeSet(item.name, index);\r\n            arrayUtils.removeFromArray(dataHolder[item.name], index);\r\n        }\r\n    };\r\n\r\n    callbacks.setField(dataHolder, item.name, []);\r\n\r\n    if (arrayUtils.getSets(item.name).length == 0) {\r\n        arrayUtils.addSet(item.name, arrayUtils.getPatternObj());\r\n        arrayUtils.addInArray(dataHolder[item.name]);\r\n    };\r\n\r\n    return <fieldset className='x-array'>\r\n            <legend><button className=\"x-add\" onClick={(e) => {\r\n                e.preventDefault();\r\n                arrayUtils.add();\r\n            }}>+</button>{item.label}\r\n            </legend>\r\n\r\n            {arrayUtils.getSets(item.name).map((set: any, index: number) => {\r\n                const holder = dataHolder[item.name][index];\r\n                set.isArrayElement = true;\r\n                const Tag = componentStore[set.type]();\r\n                return <div key={index}>\r\n                    <Tag item={set} dataHolder={holder} callbacks={callbacks}\r\n                        isArrayElement={true} componentStore={componentStore}\r\n                        index={index} removeItem={arrayUtils.minus}>\r\n                    </Tag>\r\n                </div>\r\n            })}\r\n        </fieldset>;\r\n*/","import  React from 'react';\r\n\r\nconst formLevelValidators: any = {\r\n    pwdConfirmPwd: (a: any, formData: any, putErrors: any) => {\r\n        let ret = a.message || 'Pwd should be same as confirm Pwd';\r\n        if (formData['pwd'] === formData['confirmPwd']) {\r\n            ret = undefined;\r\n        }\r\n        putErrors(a.name, ret);\r\n    },\r\n    confirmPwdLength: (a: any, formData: any, putErrors: any) => {\r\n        let ret = a.message || 'Confirm Pwd length > 3';\r\n        if (formData['confirmPwd'] && formData['confirmPwd'].length > 3) {\r\n            ret = undefined;\r\n        }\r\n        putErrors(a.name, ret);\r\n    },\r\n    sampleAsyncValidation1: (a: any, formData: any, putErrors: any) => {\r\n        const promise = new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                putErrors(a.name, a.message);\r\n                resolve('success');\r\n            }, 5000)\r\n        })\r\n        return promise;\r\n    }\r\n}\r\n\r\n\r\nexport { formLevelValidators };","import React, { useState, useEffect, useReducer, useRef } from \"react\";\r\nimport { set } from \"./generic/set\";\r\nimport { array } from \"./generic/array\";\r\nimport { useGlobalForm } from \"./generic/global-form\";\r\nimport { ErrorDisplay } from './generic/error-display';\r\nimport { formLevelValidators } from './custom/form-validators';\r\n\r\nfunction ReactForm(props: any) {\r\n    const { formJson, componentStore, formId } = props;\r\n    const [, doRefresh] = useState({});\r\n    const { resetForm, getFormData, setFormRefresh, setControlErrors, setValidators } = useGlobalForm(formId);\r\n    const [errors, setErrors]: any = useState({});\r\n    const validations = formJson.validations;\r\n\r\n    resetForm(formId);\r\n    setFormRefresh(formId, () => {\r\n        doRefresh({});\r\n    });\r\n\r\n    componentStore[\"set\"] = set;\r\n    componentStore[\"array\"] = array;\r\n\r\n    useEffect(() => {\r\n        \r\n        setValidators(formId, formId, validateAll);\r\n    })\r\n\r\n    function putErrors(key: string, value: string) {\r\n        errors[key] = value || undefined; //undefined value will not be displayed by ErrorDisplay        \r\n        const isAnyError = Object.values(errors).some(v => v != undefined);\r\n        setControlErrors(formId, formId, (isAnyError || undefined));\r\n        setErrors({ ...errors });\r\n    }\r\n\r\n    async function validateAll() {\r\n        const formData = getFormData(formId);\r\n        if (validations && Array.isArray(validations) && (validations.length > 0)) {\r\n            for (let a of validations) {\r\n                formLevelValidators[a.name] && (\r\n                    await formLevelValidators[a.name].call(null, a, formData, putErrors));\r\n            }\r\n        }\r\n    }\r\n\r\n    return <form className={formJson.class}>\r\n        <div className=\"x-header\">{formJson.title}</div>\r\n        {formJson.items.map((item: any, index: number) => {\r\n            const Tag = componentStore[item.type];\r\n            let Comp = <div key={index}>\r\n                <Tag\r\n                    item={item}\r\n                    formId={formId}\r\n                    parent={getFormData(formId)}\r\n                    componentStore={componentStore}\r\n                    parentId={formId}\r\n                ></Tag>\r\n            </div>;\r\n            return Comp;\r\n        })}\r\n        {/* <button onClick={e => {\r\n            e.preventDefault();\r\n            const ee = getEE(formId);\r\n            ee.emit('REGISTER-SERVER-ERROR', 'This is an error');\r\n        }}>Test Error</button> */}\r\n        <ErrorDisplay\r\n            formId={formId}\r\n            errors={Object.values(errors)}>\r\n        </ErrorDisplay>\r\n    </form>\r\n}\r\n\r\nexport default ReactForm;\r\n\r\n/*\r\n        // revisit //////////////////////////////////\r\n{\r\n            \"type\": \"radio\",\r\n        \"name\": \"gender\",\r\n        \"options\": [\r\n        {\r\n            \"label\": \"Male\",\r\n        \"value\":\"M\"\r\n    },\r\n        {\r\n            \"label\": \"Female\",\r\n        \"value\":\"F\"\r\n    }\r\n],\r\n    \"validations\":[\r\n        {\r\n            \"name\": \"required\",\r\n        \"message\":\"Gender is required\"\r\n    }\r\n]\r\n},\r\n{\r\n    \"type\": \"datepicker\",\r\n    \"name\": \"dob\",\r\n    \"label\": \"Date of birth\",\r\n    \"validations\": [\r\n        {\r\n            \"name\": \"required\",\r\n            \"message\": \"Date of birth is required\"\r\n        }\r\n    ]\r\n},\r\n{\r\n    \"type\": \"text\",\r\n    \"name\": \"pwd\",\r\n    \"placeholder\": \"Give your passowrd\",\r\n    \"validations\": [\r\n    {\r\n        \"name\": \"required\",\r\n    \"message\": \"pwd is required\"\r\n    }\r\n]\r\n},\r\n{\r\n    \"type\": \"select\",\r\n    \"name\": \"mySelect\",\r\n    \"label\": \"Test select1\",\r\n    \"options\": [\r\n    {\r\n        \"label\": \"---select---\",\r\n        \"value\": \"\"\r\n    },\r\n    {\r\n        \"label\": \"12, J.L. Nehru Road\",\r\n        \"value\":\"1\"\r\n    },\r\n        {\r\n            \"label\": \"1 Kalakar street\",\r\n        \"value\":\"2\"\r\n    }],\r\n\"validations\": [\r\n        {\r\n            \"name\": \"required\",\r\n        \"message\": \"Contact is required\"\r\n    }\r\n]\r\n},\r\n{\r\n        \"type\": \"select\",\r\n        \"name\": \"Select2\",\r\n        \"label\": \"Contacts\",\r\n    \"options\": {\r\n            \"url\": \"http://chisel.cloudjiffy.net/contacts/short\",\r\n        \"labelName\": \"name\",\r\n        \"valueName\": \"index\",\r\n        \"addDefault\": true\r\n    },\r\n    \"validations\": [\r\n        {\r\n            \"name\": \"required\",\r\n        \"message\": \"Contact is required\"\r\n    }\r\n]\r\n},\r\n{\r\n            \"type\": \"select\",\r\n        \"name\": \"Select3\",\r\n        \"label\": \"Method Contacts\",\r\n    \"options\": {\r\n            \"methodName\": \"contacts\",\r\n        \"args\":\"http://chisel.cloudjiffy.net/contacts/short\"\r\n    },\r\n    \"validations\": [\r\n        {\r\n            \"name\": \"required\",\r\n        \"message\": \"Contact is required\"\r\n    }\r\n]\r\n},\r\n{\r\n            \"type\": \"checkbox\",\r\n        \"name\": \"myCheck\",\r\n        \"label\": \"Test Check\",\r\n\r\n        \"validations\": [\r\n        {\r\n            \"name\": \"required\",\r\n        \"message\": \"Check is required\"\r\n    }\r\n]\r\n},\r\n{\r\n            \"type\": \"textarea\",\r\n        \"name\": \"pwd\",\r\n        \"placeholder\": \"Give your passowrd\",\r\n        \"validations\": [\r\n        {\r\n            \"name\": \"required\",\r\n        \"message\": \"pwd is required\"\r\n    }\r\n]\r\n},\r\n\r\n        {\r\n            \"type\": \"set\",\r\n            \"label\": \"Job\",\r\n            \"name\": \"empJobSet\",\r\n            \"validations\": [],\r\n            \"items\": [\r\n                {\r\n                    \"type\": \"text\",\r\n                    \"name\": \"empCompany\",\r\n                    \"placeholder\": \"Company\",\r\n                    \"label\": \"Company\",\r\n                    \"validations\": [\r\n                        {\r\n                            \"name\": \"required\",\r\n                            \"message\": \"Company is required\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    \"type\": \"datepicker\",\r\n                    \"name\": \"empDOJ\",\r\n                    \"placeholder\": \"Date Of Joining\",\r\n                    \"label\": \"Joining Date\",\r\n                    \"validations\": [\r\n                        {\r\n                            \"name\": \"required\",\r\n                            \"message\": \"Date Of Joining is required\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n\r\n{\r\n            \"type\": \"submit\",\r\n        \"action\": \"submitForm1\",\r\n        \"className\": \"x-submit\",\r\n        \"label\": \"Submit\",\r\n        \"methodName\": \"submitForm1\"\r\n    }\r\n\r\n    ///////////////////////////////////////\r\n    \"url\":\"http://chisel.cloudjiffy.net/contacts/short\",\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n,{\r\n            \"type\": \"checkbox\",\r\n        \"name\": \"myCheck\",\r\n        \"label\": \"Test check\",\r\n        \"value\": \"true\"\r\n    },\r\n                    {\r\n            \"type\": \"select\",\r\n        \"name\": \"mySelect\",\r\n        \"label\": \"Test select1\",\r\n\r\n        \"options\": \"contacts\",\r\n        \"url\":\"http://chisel.cloudjiffy.net/contacts/short\",\r\n        \"validations\": [\r\n                            {\r\n            \"name\": \"required\",\r\n        \"message\": \"Gender is required\"\r\n    }\r\n]\r\n},\r\n                    {\r\n            \"type\": \"text\",\r\n        \"name\": \"address1\",\r\n        \"placeholder\": \"Give your address1\",\r\n        \"validations\": [\r\n                            {\r\n            \"name\": \"required\",\r\n        \"message\": \"address1 is required\"\r\n    }\r\n]\r\n                    },{\r\n            \"type\": \"textarea\",\r\n        \"name\": \"address11\",\r\n        \"placeholder\": \"Give your address1\",\r\n        \"validations\": [\r\n                            {\r\n            \"name\": \"required\",\r\n        \"message\": \"address1 is required\"\r\n    }\r\n]\r\n}\r\n{\r\n            \"type\": \"radio\",\r\n        \"name\": \"myRadio\",\r\n        \"label\": \"Test radio\",\r\n        \"options\": [\r\n                {\r\n            \"label\": \"Male\",\r\n        \"value\": \"M\"\r\n    },\r\n                {\r\n            \"label\": \"Female\",\r\n        \"value\": \"F\"\r\n    }\r\n]\r\n}\r\n{\r\n            \"title\": \"This is a sample form\",\r\n        \"className\": \"\",\r\n        \"items\": [\r\n        {\r\n            \"type\": \"set\",\r\n        \"name\": \"setAddressesA\",\r\n        \"validations\": [\r\n                {\r\n            \"name\": \"setAValidation\",\r\n        \"message\": \"this is setA validation\"\r\n    }\r\n],\r\n\"items\": [\r\n                {\r\n            \"type\": \"text\",\r\n        \"name\": \"address1\",\r\n        \"placeholder\": \"Give your address1\",\r\n        \"validations\": [\r\n                        {\r\n            \"name\": \"required\",\r\n        \"message\": \"address1 is required\"\r\n    },\r\n                        {\r\n            \"name\": \"minLength\",\r\n        \"args\": [\r\n            3\r\n        ],\r\n        \"message\": \"address1 should be minimum $args chars long\"\r\n    },\r\n                        {\r\n            \"name\": \"shouldNotContainChar\",\r\n        \"args\": [\r\n            \"x\"\r\n        ],\r\n        \"message\": \"address1 should not contain char x\"\r\n    },\r\n                        {\r\n            \"name\": \"shouldHaveOneSpecialChar\",\r\n        \"message\": \"Should have at least one special char\"\r\n    },\r\n                        {\r\n            \"name\": \"userNameShouldNotExistAtServer\",\r\n        \"message\": \"Should not exist at server\",\r\n        \"onBlur\": true\r\n    }\r\n]\r\n},\r\n                {\r\n            \"type\": \"text\",\r\n        \"name\": \"address2\",\r\n        \"placeholder\": \"Give your address2\",\r\n        \"validations\": [\r\n                        {\r\n            \"name\": \"required\",\r\n        \"message\": \"address2 is required\"\r\n    }\r\n]\r\n},\r\n                {\r\n            \"type\": \"set\",\r\n        \"name\": \"nestedAddressesA\",\r\n        \"validations\": [\r\n                        {\r\n            \"name\": \"nestedSetAValidation\",\r\n        \"message\": \"this is nested setA validation\"\r\n    }\r\n],\r\n\"items\": [\r\n                        {\r\n            \"type\": \"text\",\r\n        \"name\": \"address1\",\r\n        \"placeholder\": \"Give your address1\",\r\n        \"validations\": [\r\n                                {\r\n            \"name\": \"required\",\r\n        \"message\": \"address1 is required\"\r\n    }\r\n]\r\n},\r\n                        {\r\n            \"type\": \"text\",\r\n        \"name\": \"address2\",\r\n        \"placeholder\": \"Give your address2\",\r\n        \"validations\": [\r\n                                {\r\n            \"name\": \"required\",\r\n        \"message\": \"address2 is required\"\r\n    }\r\n]\r\n}\r\n]\r\n}\r\n]\r\n},\r\n        {\r\n            \"type\": \"set\",\r\n        \"name\": \"setAddresses1\",\r\n        \"items\": [\r\n                {\r\n            \"type\": \"text\",\r\n        \"name\": \"address1\",\r\n        \"placeholder\": \"Give your address1\",\r\n        \"validations\": [\r\n                        {\r\n            \"name\": \"required\",\r\n        \"message\": \"myName is required\"\r\n    }\r\n]\r\n},\r\n                {\r\n            \"type\": \"text\",\r\n        \"name\": \"address2\",\r\n        \"placeholder\": \"Give your address2\",\r\n        \"validations\": [\r\n                        {\r\n            \"name\": \"required\",\r\n        \"message\": \"myName is required\"\r\n    }\r\n]\r\n}\r\n]\r\n},\r\n{\r\n            \"type\": \"array\",\r\n            \"name\": \"myArray1\",\r\n            \"label\": \"Label1\",\r\n            \"pattern\": {\r\n                \"type\": \"set\",\r\n                \"name\": \"myArray1Addresses\",\r\n                \"validations\": [\r\n                    {\r\n                        \"name\": \"sampleValidation\",\r\n                        \"message\": \"this is simple validation for set types\"\r\n                    }\r\n                ],\r\n                \"items\": [\r\n                    {\r\n                        \"type\": \"text\",\r\n                        \"name\": \"address11\",\r\n                        \"placeholder\": \"Give your address11\",\r\n                        \"validations\": [\r\n                            {\r\n                                \"name\": \"required\",\r\n                                \"message\": \"address11 is required\"\r\n                            }\r\n                        ]\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n                    {\r\n            \"type\": \"text\",\r\n        \"name\": \"address22\",\r\n        \"placeholder\": \"Give your address21\",\r\n        \"validations\": [\r\n                            {\r\n            \"name\": \"required\",\r\n        \"message\": \"address21 is required\"\r\n    }\r\n]\r\n}\r\n]\r\n}\r\n},\r\n        {\r\n            \"type\": \"array\",\r\n        \"name\": \"myArray2\",\r\n        \"label\": \"Label1\",\r\n            \"pattern\": {\r\n            \"type\": \"set\",\r\n        \"name\": \"myArray2Addresses\",\r\n        \"validations\": [\r\n                    {\r\n            \"name\": \"myArray2SetAValidation\",\r\n        \"message\": \"this is myArray2 pattern validation\"\r\n    }\r\n],\r\n\"items\": [\r\n                    {\r\n            \"type\": \"text\",\r\n        \"name\": \"address11\",\r\n        \"placeholder\": \"Give your address11\",\r\n        \"validations\": [\r\n                            {\r\n            \"name\": \"required\",\r\n        \"message\": \"address11 is required\"\r\n    }\r\n]\r\n},\r\n                    {\r\n            \"type\": \"text\",\r\n        \"name\": \"address22\",\r\n        \"placeholder\": \"Give your address21\",\r\n        \"validations\": [\r\n                            {\r\n            \"name\": \"required\",\r\n        \"message\": \"address21 is required\"\r\n    }\r\n]\r\n}\r\n]\r\n}\r\n}\r\n]\r\n}\r\n\r\n        {\r\n            \"type\": \"set\",\r\n        \"name\": \"addresses\",\r\n        \"items\": [\r\n                {\r\n            \"type\": \"text\",\r\n        \"name\": \"address1\",\r\n        \"placeholder\": \"Give your address1\",\r\n        \"validations\": [\r\n                        {\r\n            \"name\": \"required\",\r\n        \"message\": \"address1 is required\"\r\n    }\r\n]\r\n},\r\n                {\r\n            \"type\": \"text\",\r\n        \"name\": \"address2\",\r\n        \"placeholder\": \"Give your address2\",\r\n        \"validations\": [\r\n                        {\r\n            \"name\": \"required\",\r\n        \"message\": \"address2 is required\"\r\n    }\r\n]\r\n}\r\n]\r\n},\r\n        {\r\n            \"type\": \"array\",\r\n        \"name\": \"myArray\",\r\n        \"label\": \"Label1\",\r\n            \"pattern\": {\r\n            \"type\": \"set\",\r\n        \"name\": \"addresses\",\r\n        \"items\": [\r\n                    {\r\n            \"type\": \"text\",\r\n        \"name\": \"address11\",\r\n        \"placeholder\": \"Give your address11\",\r\n        \"validations\": [\r\n                            {\r\n            \"name\": \"required\",\r\n        \"message\": \"address11 is required\"\r\n    }\r\n]\r\n},\r\n                    {\r\n            \"type\": \"text\",\r\n        \"name\": \"address22\",\r\n        \"placeholder\": \"Give your address21\",\r\n        \"validations\": [\r\n                            {\r\n            \"name\": \"required\",\r\n        \"message\": \"address21 is required\"\r\n    }\r\n]\r\n}\r\n]\r\n}\r\n}\r\n\"title\": \"This is a sample form\",\r\n\"className\": \"\",\r\n\"items\": [\r\n        {\r\n            \"type\": \"set\",\r\n        \"name\": \"addresses\",\r\n        \"items\": [\r\n                {\r\n            \"type\": \"text\",\r\n        \"name\": \"address1\",\r\n        \"placeholder\": \"Give your address1\",\r\n        \"validations\": [\r\n                        {\r\n            \"name\": \"required\",\r\n        \"message\": \"myName is required\"\r\n    }\r\n]\r\n},\r\n                {\r\n            \"type\": \"text\",\r\n        \"name\": \"address2\",\r\n        \"placeholder\": \"Give your address2\"\r\n    }\r\n]\r\n},\r\n        {\r\n            \"type\": \"array\",\r\n        \"name\": \"myArray\",\r\n        \"label\": \"Label1\",\r\n            \"pattern\": {\r\n            \"type\": \"set\",\r\n        \"name\": \"addresses\",\r\n        \"items\": [\r\n                    {\r\n            \"type\": \"text\",\r\n        \"name\": \"address11\",\r\n        \"placeholder\": \"Give your address11\",\r\n        \"validations\": [\r\n                            {\r\n            \"name\": \"required\",\r\n        \"message\": \"address1 is required\"\r\n    }\r\n]\r\n},\r\n                    {\r\n            \"type\": \"text\",\r\n        \"name\": \"address22\",\r\n        \"placeholder\": \"Give your address21\"\r\n    }\r\n]\r\n}\r\n}\r\n]\r\n}\r\n\r\n,\r\n        {\r\n            \"type\": \"set\",\r\n        \"name\": \"addresses\",\r\n        \"items\": [\r\n                {\r\n            \"type\": \"text\",\r\n        \"name\": \"address1\",\r\n        \"placeholder\": \"Give your address1\"\r\n    },\r\n                {\r\n            \"type\": \"text\",\r\n        \"name\": \"address2\",\r\n        \"placeholder\": \"Give your address2\"\r\n    }\r\n]\r\n},\r\n        {\r\n            \"type\": \"array\",\r\n        \"name\": \"myArray\",\r\n        \"label\": \"Label1\",\r\n            \"pattern\": {\r\n            \"type\": \"set\",\r\n        \"name\": \"addresses\",\r\n        \"items\": [\r\n                    {\r\n            \"type\": \"text\",\r\n        \"name\": \"address11\",\r\n        \"placeholder\": \"Give your address11\"\r\n    },\r\n                    {\r\n            \"type\": \"text\",\r\n        \"name\": \"address22\",\r\n        \"placeholder\": \"Give your address21\"\r\n    }\r\n]\r\n}\r\n}\r\n\r\n        function isValidForm() {\r\n        const isAnyError = Object.values(childErrors).some((x: any) => x != undefined);\r\n        return !isAnyError;\r\n\r\n\r\n\r\n    function isValidating() {\r\n        return Object.values(validating).some(x => x != undefined);\r\n    }\r\n    }\r\n*/","import React from 'react';\r\nconst builtinValidators: any = {\r\n    required: (a: any, value: any, putErrors: any) => {\r\n        let ret: any = a.message || 'The value is required';\r\n        value && ((String(value).length > 0) || (value === true)) && (ret = undefined);\r\n        putErrors(a.name, ret);\r\n    },\r\n\r\n    minLength: (a: any, value: string, putErrors: any) => {\r\n        const message = a.message && (a.message.replace('$args', a.args[0].toString()));\r\n        const len = a.args[0];\r\n        let ret: any = message || 'Minimum length required is'.concat(' ', len.toString());\r\n        ((!value) || (value.length >= len)) && (ret = undefined);\r\n        putErrors(a.name, ret);\r\n    },\r\n\r\n    shouldNotContainChar: (a: any, value: string, putErrors: any) => {\r\n        const message = a.message && (a.message.replace('$args', a.args[0]))\r\n        let ret: any = message || 'Should not have '.concat(a.args[0], ' in the value');\r\n        (!(value && value.includes(a.args[0]))) && (ret = undefined);\r\n        putErrors(a.name, ret);\r\n    }\r\n\r\n    // Provide all built-in sync / async validators here\r\n}\r\nexport {builtinValidators};","import { ibuki } from '../utils/Ibuki';\r\n\r\nconst itemValidators:any = {\r\n    shouldHaveOneSpecialChar: (a: any, value: string, putErrors: any) => {\r\n        let ret: any = a.message || 'Should have one special char';\r\n        const format = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+/;\r\n        ((value.length === 0) || format.test(value)) && (ret = undefined)\r\n        putErrors(a.name, ret);\r\n    },\r\n    sampleAsyncValidation1: (a: any, value: string, putErrors: any, callbacks: any) => {\r\n        const promise = new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                putErrors(a.name, a.message);\r\n                resolve('success');\r\n            }, 5000)\r\n        })\r\n        return promise;\r\n    },\r\n    sampleAsyncValidation2: (a: any, value: string, putErrors: any, callbacks: any) => {\r\n        const promise = new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                putErrors(a.name, a.message);\r\n                // console.log('asyncValidation2');\r\n                resolve('success');\r\n            }, 7000)\r\n        })\r\n        return promise;\r\n    }\r\n    // Put your custom async / sync item validators here\r\n\r\n}\r\n\r\nexport {itemValidators};\r\n\r\n/*\r\n\r\n*/","import { filter } from 'rxjs/operators';\r\nimport { Subject, BehaviorSubject } from 'rxjs';\r\nimport axios from 'axios';\r\n\r\nclass Ibuki {\r\n  subject = new Subject();\r\n  behSubject = new BehaviorSubject<any>(0);\r\n\r\n  emit(id: String, options: any) {\r\n    this.subject\r\n      .next({ id: id, data: options });\r\n  };\r\n\r\n  filterOn(id: String) {\r\n    return (this.subject.pipe(filter((d: any) => (d.id === id))));\r\n  }\r\n\r\n  asyncFilterOn(id: String, f: any) {\r\n    return this.subject.pipe(filter((d: any) => d.id === id))\r\n      .subscribe(d => {\r\n        f(d);\r\n      });\r\n  }\r\n\r\n  hotEmit(id: string, options: any) {\r\n    this.behSubject.next({ id: id, data: options });\r\n  }\r\n\r\n  hotFilterOn(id: string) {\r\n    return this.behSubject.pipe(filter((d: any) => (d.id === id)));\r\n  }\r\n\r\n  async httpGet1(url: string) {\r\n    const res = await fetch(url);\r\n    const json = await res.json();\r\n    return json;\r\n  }\r\n\r\n  async httpGet(url: string) {\r\n    const res = await axios.get(url);\r\n    return res; //res.data has actual data\r\n  }\r\n\r\n  async httpPost(url: string, data: any) {\r\n    const res = await axios.post(url, data);\r\n    return res; //res.data has actual data\r\n  }\r\n\r\n  async httpPost1(url: string, data: any) {\r\n    let ret = '';\r\n    try {\r\n      const res = await fetch(url, {\r\n        method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n        mode: \"cors\", // no-cors, cors, *same-origin\r\n        cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          // \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n        },\r\n        body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n      });\r\n      const json = await res.json();\r\n      ret = json;\r\n    } catch (e) {\r\n      console.log(e);\r\n      ret = e;\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  httpPost2(url: string, data: any) {\r\n    const promise = fetch(url, {\r\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n      mode: \"cors\", // no-cors, cors, *same-origin\r\n      cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n      body: JSON.stringify(data), // body data type must match \"Content-Type\" header\r\n    })\r\n      .then((res) => {\r\n        const ret = res.json();\r\n        return ret;\r\n      })\r\n      .then(json => {\r\n        return json;\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        return error;\r\n      });\r\n    return promise;\r\n  }\r\n\r\n}\r\n\r\nconst ibuki = new Ibuki();\r\nexport { ibuki };","import { ibuki } from \"../utils/Ibuki\";\r\nimport config from '../config.json';\r\nimport { useGlobalForm } from \"../generic/global-form\";\r\n\r\nconst customMethods: any = {\r\n  test1: () => {\r\n    return [\r\n      {\r\n        label: \"Male\",\r\n        value: \"M\"\r\n      },\r\n      {\r\n        label: \"female\",\r\n        value: \"F\"\r\n      }\r\n    ];\r\n  },\r\n  industries: () => {\r\n    return [\r\n      {\r\n        label: \"Software\",\r\n        value: \"software\"\r\n      }, {\r\n        label: \"Garment\",\r\n        value: \"garment\"\r\n      }, {\r\n        label: \"Entertainment\",\r\n        value: \"entertainment\"\r\n      }, {\r\n        label: \"Food\",\r\n        value: \"food\"\r\n      }\r\n    ];\r\n  },\r\n  numericZeroToTen: () => {\r\n    return [\r\n      {\r\n        label: \"Zero\",\r\n        value: \"0\"\r\n      }, {\r\n        label: \"One\",\r\n        value: \"1\"\r\n      }, {\r\n        label: \"Two\",\r\n        value: \"2\"\r\n      }, {\r\n        label: \"Three\",\r\n        value: \"3\"\r\n      }, {\r\n        label: \"Four\",\r\n        value: \"4\"\r\n      }, {\r\n        label: \"Five\",\r\n        value: \"5\"\r\n      }, {\r\n        label: \"Six\",\r\n        value: \"6\"\r\n      }, {\r\n        label: \"Seven\",\r\n        value: \"7\"\r\n      }, {\r\n        label: \"Eight\",\r\n        value: \"8\"\r\n      }, {\r\n        label: \"Nine\",\r\n        value: \"9\"\r\n      }, {\r\n        label: \"Ten\",\r\n        value: \"10\"\r\n      }\r\n    ];\r\n  },\r\n  electronicProduct: () => {\r\n    return [\r\n      {\r\n        label: \"Television\",\r\n        value: \"television\"\r\n      }, {\r\n        label: \"Desktop\",\r\n        value: \"desktop\"\r\n      }, {\r\n        label: \"Laptop\",\r\n        value: \"laptop\"\r\n      }, {\r\n        label: \"projector\",\r\n        value: \"projector\"\r\n      }, {\r\n        label: \"Cooler\",\r\n        value: \"cooler\"\r\n      }\r\n    ];\r\n  },\r\n  contacts: async (url: string) => {\r\n    const json = await ibuki.httpPost(url, {});\r\n    const json1: any[] = json.data.map((x: any) => {\r\n      return { label: x[\"name\"], value: x[\"index\"] };\r\n    });\r\n    json1.unshift({ label: \"---select---\", value: \"\" });\r\n    return json1;\r\n  },\r\n\r\n  submitForm1: async (formId: string) => {\r\n    const { \r\n      registerServerError, getFormData, doFormRefresh, resetForm } = useGlobalForm(formId);\r\n    const url = config.postUrl;\r\n    try {\r\n      const ret = await ibuki.httpPost(url, getFormData(formId));\r\n      console.log(ret.data);\r\n      // throw new Error('This is intentional error');\r\n      resetForm(formId);\r\n      doFormRefresh(formId);\r\n    } catch (e) {\r\n      console.log(e.message);\r\n      registerServerError(formId, e.message);\r\n    }\r\n  }\r\n};\r\nexport { customMethods };\r\n","import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { builtinValidators } from \"../utils/builtin-validators\";\r\nimport { itemValidators } from \"../custom/item-validators\";\r\nimport { customMethods } from \"../custom/custom-methods\";\r\nimport { ibuki } from \"../utils/Ibuki\";\r\nimport { ErrorDisplay } from \"./error-display\";\r\nimport { useGlobalForm } from \"./global-form\";\r\n\r\nconst useGeneric = (props: any) => {\r\n  const { parent, item, idx, parentId, formId } = props;\r\n  const { initField, setField, setValidators, setControlErrors } = useGlobalForm(formId);\r\n  const idx1 = idx || ''; // to convert undefined to ''. Otherwise undefined word is appended to item.name while calling setValidators()\r\n  const controlId = parentId.concat('.', item.name, idx1); //unique controlId. It will always be same for same control\r\n\r\n  const [errors, setErrors]: any = useState({});\r\n  const [, setRefresh] = useState({});\r\n  let [selectOptions, setSelectOptions]: any = useState([]); // for select controls\r\n\r\n  const XLabel = () => (item.label ? <label>{item.label}</label> : null);\r\n  const XErrorDisplay = () => <ErrorDisplay errors={Object.values(errors)} />;\r\n\r\n  useEffect(() => {\r\n    setErrors({});\r\n    initField(parent, item.name, '');\r\n  }, [formId])\r\n\r\n  useEffect(()=>{\r\n    setValidators(formId, controlId, validateAll);\r\n  })\r\n\r\n  const validations = item.validations;\r\n  const allItemValidators = { ...builtinValidators, ...itemValidators };\r\n  const onChangeValidations = validations && Array.isArray(validations) && (validations.length > 0)\r\n    && validations.filter((x: any) =>\r\n      (x['onChange'] == true) || ((x['onChange'] == undefined) && (x['onBlur'] == undefined)));\r\n  const onBlurValidations = validations && Array.isArray(validations) && (validations.length > 0)\r\n    && validations.filter((x: any) =>\r\n      (x['onBlur'] == true) || ((x['onChange'] == undefined) && (x['onBlur'] == undefined)));\r\n\r\n  function putErrors(key: string, value: string) {\r\n    errors[key] = value || undefined; //undefined value will not be displayed by ErrorDisplay\r\n    const isAnyError = Object.values(errors).some(v => v != undefined);\r\n    setControlErrors(formId, controlId, isAnyError || undefined);\r\n    setErrors({ ...errors });\r\n  };\r\n\r\n  async function validateAll() {\r\n    if (validations && Array.isArray(validations) && (validations.length > 0)) {\r\n      for (let a of validations) {\r\n        await allItemValidators[a.name].call(null, a, parent[item.name], putErrors); // for data storage at item level        \r\n      }\r\n    }\r\n  }\r\n\r\n  async function doValidate(a: any, value: any) {\r\n    if (allItemValidators[a.name]) {\r\n      await allItemValidators[a.name].call(null, a, value, putErrors);\r\n    }\r\n  }\r\n\r\n  async function onChangeEvent(value: any) {\r\n    setField(parent, item.name, value);\r\n    setRefresh(({}));\r\n    if (onChangeValidations && (onChangeValidations.length > 0)) {\r\n      for (let a of onChangeValidations) {\r\n        await doValidate(a, value);\r\n      }\r\n    }\r\n  };\r\n\r\n  async function onBlurEvent(value: any) {\r\n    if (onBlurValidations && (onBlurValidations.length > 0)) {\r\n      for (let a of onBlurValidations) {\r\n        await doValidate(a, value);\r\n      }\r\n    }\r\n  };\r\n\r\n  async function doInitForSelect() {\r\n    const itemOptions = item.options;\r\n    let tempOptions;\r\n    if (!itemOptions) { return; }\r\n    if (Array.isArray(itemOptions)) {\r\n      (itemOptions.length > 0) && (selectOptions = itemOptions);\r\n    } else if (itemOptions.methodName) {\r\n      const args = itemOptions.args;\r\n      selectOptions = await customMethods[itemOptions.methodName](args); //the customMethod returns array of type {label:'', value:''}\r\n    } else if (itemOptions.url) {\r\n      const labelName = itemOptions.labelName;\r\n      const valueName = itemOptions.valueName;\r\n      let method = itemOptions.httpmethod || itemOptions.httpMethod;\r\n      method = method || 'httpPost';\r\n      if (method === 'httpPost') {\r\n        tempOptions = await ibuki.httpPost(itemOptions.url, {});\r\n      } else {\r\n        tempOptions = await ibuki.httpGet(itemOptions.url);\r\n      }\r\n      selectOptions = tempOptions.data.map((x: any) => {\r\n        return {\r\n          label: labelName ? x[labelName] : x.label,\r\n          value: valueName ? x[valueName] : x.value\r\n        }\r\n      });\r\n      itemOptions.addDefault && (selectOptions.unshift({ label: \"---select---\", value: \"\" }))\r\n    }\r\n    parent[item.name] = (selectOptions.length > 0) ? selectOptions[0].value : ''; // For selecting 1st option as default\r\n    setSelectOptions([...selectOptions]); //cloning options for refresh    \r\n  }\r\n\r\n\r\n  return {\r\n    item: item,\r\n    parent:parent,\r\n    xName: item.name,\r\n    xValue: parent[item.name],//dataHolder[item.name], // controlValue,\r\n    xPlaceholder: item.placeholder,\r\n    XLabel: XLabel,\r\n    XErrorDisplay: XErrorDisplay,\r\n    onChangeEvent: onChangeEvent,\r\n    onBlurEvent: onBlurEvent,\r\n    xClassName: item.class,\r\n    xStyle: item.style,\r\n    doInitForSelect: doInitForSelect,\r\n    selectOptions: selectOptions\r\n  };\r\n};\r\n\r\nexport { useGeneric };\r\n\r\n/*\r\n\r\n*/","import React, { useState, useEffect } from \"react\";\r\nimport { useGeneric } from \"../generic/generic-handler\";\r\nimport { useSubmit } from \"../generic/generic-submit\";\r\n\r\nconst componentStore: any = {\r\n\r\n  text:\r\n    (props: any) => {\r\n      const { item } = props;\r\n      const { xName\r\n        , xValue\r\n        , xPlaceholder\r\n        , XLabel\r\n        , XErrorDisplay\r\n        , onChangeEvent\r\n        , onBlurEvent\r\n        , xClassName\r\n        , xStyle\r\n      } = useGeneric(props);\r\n\r\n      return (\r\n        <>\r\n          <div><XLabel></XLabel></div>\r\n          <input\r\n            type=\"text\"\r\n            value={xValue || \"\"}\r\n            placeholder={xPlaceholder}\r\n            name={xName}\r\n            onChange={e => onChangeEvent(e.target.value)}\r\n            onBlur={e => onBlurEvent(e.target.value)}\r\n            className={xClassName}\r\n            style={xStyle}\r\n          ></input>\r\n          <XErrorDisplay />\r\n        </>\r\n      );\r\n    },\r\n\r\n  textarea:\r\n    (props: any) => {\r\n      const { xName,\r\n        xValue,\r\n        xPlaceholder,\r\n        XLabel,\r\n        XErrorDisplay,\r\n        onChangeEvent,\r\n        onBlurEvent,\r\n        xClassName,\r\n        xStyle } = useGeneric(props);\r\n\r\n      return (\r\n        <>\r\n          <div><XLabel /></div>\r\n          <textarea\r\n            value={xValue || \"\"}\r\n            placeholder={xPlaceholder}\r\n            name={xName}\r\n            onChange={e => onChangeEvent(e.target.value)}\r\n            onBlur={e => onBlurEvent(e.target.value)}\r\n            className={xClassName}\r\n            style={xStyle}\r\n          />\r\n          <XErrorDisplay />\r\n        </>\r\n      );\r\n    },\r\n\r\n  radio:\r\n    (props: any) => {\r\n      const { item\r\n        , xName\r\n        , xValue\r\n        , XLabel\r\n        , XErrorDisplay\r\n        , onChangeEvent\r\n        , xClassName\r\n        , xStyle } = useGeneric(props);\r\n\r\n      const comp = (\r\n        <>\r\n          <div><XLabel /></div>\r\n          {item.options.map((option: any, index: number) => {\r\n            return (\r\n              <div key={index}>\r\n                <label>\r\n                  <input\r\n                    type=\"radio\"\r\n                    checked={xValue === option.value}\r\n                    value={option.value}\r\n                    name={xName}\r\n                    onChange={e => onChangeEvent(e.target.value)}\r\n                    className={xClassName}\r\n                    style={xStyle}\r\n                  />\r\n                  {option.label}\r\n                </label>\r\n              </div>\r\n            );\r\n          })}\r\n          <XErrorDisplay />\r\n        </>\r\n      );\r\n      return comp;\r\n    },\r\n\r\n  checkbox:\r\n    (props: any) => {\r\n      const { xName\r\n        , xValue\r\n        , XLabel\r\n        , XErrorDisplay\r\n        , onChangeEvent\r\n        , xClassName\r\n        , xStyle } = useGeneric(props);\r\n\r\n      return (\r\n        <>\r\n          <div><XLabel /></div>\r\n          <input\r\n            type=\"checkbox\"\r\n            name={xName}\r\n            value={xValue}\r\n            checked={(!xValue ? false : true) || false}\r\n            onChange={e => onChangeEvent(e.target.checked)}\r\n            className={xClassName}\r\n            style={xStyle}\r\n          />\r\n          <XErrorDisplay />\r\n        </>\r\n      );\r\n    },\r\n\r\n  select:\r\n    (props: any) => {\r\n      const {\r\n        xValue,\r\n        xName,\r\n        XLabel,\r\n        XErrorDisplay,\r\n        onChangeEvent,\r\n        xClassName,\r\n        xStyle,\r\n        doInitForSelect,\r\n        selectOptions,\r\n        parent,\r\n        item\r\n      } = useGeneric(props);\r\n\r\n      useEffect(() => {\r\n        doInitForSelect();        \r\n      }, []);\r\n\r\n      useEffect(() => {\r\n        \r\n      },[])\r\n\r\n      const comp = (\r\n        <>\r\n          <div><XLabel /></div>\r\n          <select\r\n            onChange={e => onChangeEvent(e.target.value)}\r\n            name={xName}\r\n            value={xValue}\r\n            className={xClassName}\r\n            style={xStyle}> {selectOptions.map((x: any, index: number) => (\r\n              <option key={index} value={x[\"value\"]}>\r\n                {x[\"label\"]}\r\n              </option>\r\n            ))}</select>\r\n          <XErrorDisplay />\r\n        </>\r\n      );\r\n      return comp;\r\n    },\r\n\r\n  datepicker:\r\n    (props: any) => {\r\n      const {\r\n        xName,\r\n        xValue,\r\n        xPlaceholder,\r\n        XLabel,\r\n        XErrorDisplay,\r\n        onChangeEvent,\r\n        onBlurEvent,\r\n        xClassName,\r\n        xStyle\r\n      } = useGeneric(props);\r\n\r\n      return (\r\n        <>\r\n          <div><XLabel></XLabel></div>\r\n          <input\r\n            type=\"date\"\r\n            value={xValue || \"\"}\r\n            placeholder={xPlaceholder}\r\n            name={xName}\r\n            onChange={e => onChangeEvent(e.target.value)}\r\n            onBlur={e => onBlurEvent(e.target.value)}\r\n            className={xClassName}\r\n            style={xStyle}\r\n          />\r\n          <XErrorDisplay></XErrorDisplay>\r\n        </>\r\n      );\r\n    },\r\n\r\n  button:\r\n    (props: any) => {\r\n      const { item, dataHolder } = props;\r\n      let [x, setx] = useState(0);\r\n      const className = item.className || \"x-button\";\r\n      return (\r\n        <div className={className}>\r\n          <button onClick={e => {\r\n            // customMethods[item.action](dataHolder);\r\n            setx(x + 1);\r\n          }\r\n          }>\r\n\r\n          </button>\r\n        </div>\r\n      );\r\n    },\r\n\r\n  submit:\r\n    (props: any) => {\r\n      const { item, xClassName,\r\n        xStyle } = props;\r\n      const { submitOnClick } = useSubmit(props);\r\n      const className = xClassName || \"x-submit\";\r\n      return (\r\n        <div className={className}>\r\n          <button\r\n            className={xClassName}\r\n            style={xStyle}\r\n            onClick={e => {\r\n              submitOnClick(e);\r\n            }}>\r\n            {item.label}\r\n          </button>\r\n          {/* <div>{isBusy ? 'True' : 'False'}</div> */}\r\n        </div>\r\n      );\r\n    }\r\n};\r\n\r\nexport { componentStore };\r\n\r\n/*\r\n\r\nif (item.options) {\r\n        if (Array.isArray(item.options)) {\r\n          options = item.options;\r\n        } else if (customMethods[item.options]) {\r\n          if (item[\"url\"]) {\r\n            (async () => {\r\n              options = await customMethods[\"contacts\"](item[\"url\"]);\r\n              setOptionsValues(options);\r\n            })();\r\n          } else {\r\n            options = customMethods[item.options]();\r\n            setOptionsValues(options);\r\n          }\r\n        }\r\n      }\r\n\r\n// onClick={async e => {\r\n        //   callbacks.setFormData(dataHolder);\r\n\r\n        //   const resetAllErrors = storeUtil.getAll3(callbacks.getFormId(), 'resetErrors');\r\n        //   for (let x of resetAllErrors) {\r\n        //     x();\r\n        //   }\r\n\r\n        //   const allValidations = storeUtil.getAll3(callbacks.getFormId(), 'validations');\r\n        //   for (let x of allValidations) {\r\n        //     await x();\r\n        //   }\r\n        //   callbacks.logFormData();\r\n        // }}\r\n*/\r\n","import { useState } from \"react\";\r\nimport { storeUtil } from '../utils/globals';\r\nimport { customMethods } from '../custom/custom-methods';\r\nimport { useGlobalForm } from \"./global-form\";\r\n\r\nconst useSubmit = (props: any) => {\r\n    const { formId, item, dataHolder, callbacks } = props;\r\n    const {\r\n        clearServerError, doValidate, isValidForm } = useGlobalForm(formId);\r\n    let [isBusy, setIsBusy] = useState(false);\r\n    async function submitOnClick(e: any) {\r\n        e.preventDefault();\r\n        clearServerError(formId);\r\n        await doValidate(formId);\r\n        if (isValidForm(formId)) {\r\n            const methodName = item.methodName;\r\n            methodName && customMethods[methodName] && (\r\n                await customMethods[methodName](formId)// dataHolder has formData\r\n            )\r\n        }\r\n        // setIsBusy(false);\r\n    }\r\n    return { submitOnClick: submitOnClick, isBusy: isBusy };\r\n}\r\n\r\nexport { useSubmit };\r\n\r\n/*\r\n\r\n*/","import React, { useState} from 'react';\r\nimport ReactForm from './react-form/ReactForm';\r\nimport { componentStore } from './react-form/component-store/html-component-store';\r\n// import { componentStore } from './react-form/component-store/mat-component-store';\r\n// import { componentStore } from './react-form/component-store/primereact-component-store';\r\nimport './App.scss';\r\nimport employeeInfo from './sample-json-forms/employee-info.json';\r\nimport gymRegistration from './sample-json-forms/gym-registration.json';\r\nimport studentAdmission from './sample-json-forms/student-admission.json';\r\nimport clubMembership from './sample-json-forms/club-membership.json';\r\nimport electronicsRental from './sample-json-forms/electronics-rental.json';\r\nimport loanApplication from './sample-json-forms/loan-application.json';\r\nimport companyProfile from './sample-json-forms/company-profile.json';\r\nimport employeePerformance from './sample-json-forms/employee-performance.json';\r\nimport softwareEvaluation from './sample-json-forms/software-evaluation.json';\r\nimport eventFeedback from './sample-json-forms/event-feedback.json';\r\nimport sample1 from './sample-json-forms/sample1.json';\r\n\r\nfunction App() {\r\n  let [formJson, setFormJson] = useState({});\r\n  const [formId, setFormId] = useState('');\r\n  const [jsonValue, setJsonValue] = useState('');\r\n  const [isDisabled,setIsDisabled] = useState(true);\r\n  const formObjects: any = {\r\n    \"1\": employeeInfo,\r\n    \"2\": gymRegistration,\r\n    \"3\": studentAdmission,\r\n    \"4\": clubMembership,\r\n    \"5\": loanApplication,\r\n    \"6\": electronicsRental,\r\n    \"7\": companyProfile,\r\n    \"8\": employeePerformance,\r\n    \"9\": softwareEvaluation,\r\n    \"10\": eventFeedback,\r\n    \"11\": sample1\r\n  };\r\n\r\n\r\n  const isProceed = Object.keys(formJson).length !== 0;\r\n\r\n  return <div className=\"grid-layout-3columns\">\r\n    <div>\r\n      <select onChange={e => {\r\n        setIsDisabled(true);\r\n        formJson = formObjects[e.target.value];\r\n        setFormId(e.target.value);\r\n        if (formJson) {\r\n          setFormJson(formJson);\r\n          setJsonValue(JSON.stringify(formJson, undefined, 4));\r\n        } else {\r\n          setFormJson({ ...{} });\r\n        }\r\n      }}> \r\n        <option value=\"\">---select form---</option>\r\n        <option value=\"1\">Employee Info</option>\r\n        <option value=\"2\">Gym Regitration</option>\r\n        <option value=\"3\">Student Admission</option>\r\n        <option value=\"4\">Club Membership</option>\r\n        <option value=\"5\">Loan Application</option>\r\n        <option value=\"6\">Electronics Rental</option>\r\n        <option value=\"7\">Company Profile</option>\r\n        <option value=\"8\">Employee Performance</option>\r\n        <option value=\"9\">Software Evaluation</option>\r\n        <option value=\"10\">Event Feedback</option>\r\n        <option value=\"11\">Sample1</option>\r\n      </select>\r\n      <button onClick={e => {setIsDisabled(false)}}>Edit</button>\r\n      <button onClick={e => {setFormJson(JSON.parse(jsonValue));}}>Submit</button>\r\n      {/* <pre>{isProceed && JSON.stringify(formJson, null, 2)}</pre> */}\r\n      <textarea disabled={isDisabled} hidden={!isProceed} className=\"json-display\" \r\n                onChange={e => {setJsonValue(e.target.value)}} value={jsonValue}></textarea>\r\n    </div>\r\n    <div>\r\n      {isProceed && <ReactForm\r\n        formJson={formJson}\r\n        componentStore={componentStore}\r\n        formId={formId}\r\n      >\r\n      </ReactForm>}\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}